// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldStatusUpdate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldStatusUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace strategy_protocol {

namespace {

const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_CommonProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_CommonProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Mine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_Mine_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_Obstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Worker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_Worker_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Soldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatusUpdateMessage_Soldier_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldStatusUpdate_2eproto() {
  protobuf_AddDesc_WorldStatusUpdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldStatusUpdate.proto");
  GOOGLE_CHECK(file != NULL);
  WorldStatusUpdateMessage_descriptor_ = file->message_type(0);
  static const int WorldStatusUpdateMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, bases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, mines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, myteam_),
  };
  WorldStatusUpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_descriptor_,
      WorldStatusUpdateMessage::default_instance_,
      WorldStatusUpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage));
  WorldStatusUpdateMessage_CommonProperties_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(0);
  static const int WorldStatusUpdateMessage_CommonProperties_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_CommonProperties, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_CommonProperties, position_),
  };
  WorldStatusUpdateMessage_CommonProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_CommonProperties_descriptor_,
      WorldStatusUpdateMessage_CommonProperties::default_instance_,
      WorldStatusUpdateMessage_CommonProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_CommonProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_CommonProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_CommonProperties));
  WorldStatusUpdateMessage_Base_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(1);
  static const int WorldStatusUpdateMessage_Base_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Base, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Base, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Base, team_),
  };
  WorldStatusUpdateMessage_Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_Base_descriptor_,
      WorldStatusUpdateMessage_Base::default_instance_,
      WorldStatusUpdateMessage_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_Base));
  WorldStatusUpdateMessage_Mine_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(2);
  static const int WorldStatusUpdateMessage_Mine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Mine, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Mine, capacity_),
  };
  WorldStatusUpdateMessage_Mine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_Mine_descriptor_,
      WorldStatusUpdateMessage_Mine::default_instance_,
      WorldStatusUpdateMessage_Mine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Mine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Mine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_Mine));
  WorldStatusUpdateMessage_Obstacle_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(3);
  static const int WorldStatusUpdateMessage_Obstacle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Obstacle, common_),
  };
  WorldStatusUpdateMessage_Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_Obstacle_descriptor_,
      WorldStatusUpdateMessage_Obstacle::default_instance_,
      WorldStatusUpdateMessage_Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_Obstacle));
  WorldStatusUpdateMessage_Worker_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(4);
  static const int WorldStatusUpdateMessage_Worker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, team_),
  };
  WorldStatusUpdateMessage_Worker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_Worker_descriptor_,
      WorldStatusUpdateMessage_Worker::default_instance_,
      WorldStatusUpdateMessage_Worker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Worker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_Worker));
  WorldStatusUpdateMessage_Soldier_descriptor_ = WorldStatusUpdateMessage_descriptor_->nested_type(5);
  static const int WorldStatusUpdateMessage_Soldier_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Soldier, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Soldier, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Soldier, team_),
  };
  WorldStatusUpdateMessage_Soldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatusUpdateMessage_Soldier_descriptor_,
      WorldStatusUpdateMessage_Soldier::default_instance_,
      WorldStatusUpdateMessage_Soldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Soldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatusUpdateMessage_Soldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatusUpdateMessage_Soldier));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldStatusUpdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_descriptor_, &WorldStatusUpdateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_CommonProperties_descriptor_, &WorldStatusUpdateMessage_CommonProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_Base_descriptor_, &WorldStatusUpdateMessage_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_Mine_descriptor_, &WorldStatusUpdateMessage_Mine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_Obstacle_descriptor_, &WorldStatusUpdateMessage_Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_Worker_descriptor_, &WorldStatusUpdateMessage_Worker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatusUpdateMessage_Soldier_descriptor_, &WorldStatusUpdateMessage_Soldier::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldStatusUpdate_2eproto() {
  delete WorldStatusUpdateMessage::default_instance_;
  delete WorldStatusUpdateMessage_reflection_;
  delete WorldStatusUpdateMessage_CommonProperties::default_instance_;
  delete WorldStatusUpdateMessage_CommonProperties_reflection_;
  delete WorldStatusUpdateMessage_Base::default_instance_;
  delete WorldStatusUpdateMessage_Base_reflection_;
  delete WorldStatusUpdateMessage_Mine::default_instance_;
  delete WorldStatusUpdateMessage_Mine_reflection_;
  delete WorldStatusUpdateMessage_Obstacle::default_instance_;
  delete WorldStatusUpdateMessage_Obstacle_reflection_;
  delete WorldStatusUpdateMessage_Worker::default_instance_;
  delete WorldStatusUpdateMessage_Worker_reflection_;
  delete WorldStatusUpdateMessage_Soldier::default_instance_;
  delete WorldStatusUpdateMessage_Soldier_reflection_;
}

void protobuf_AddDesc_WorldStatusUpdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::strategy_protocol::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027WorldStatusUpdate.proto\022\021strategy_prot"
    "ocol\032\014Common.proto\"\230\010\n\030WorldStatusUpdate"
    "Message\022\?\n\005bases\030\001 \003(\01320.strategy_protoc"
    "ol.WorldStatusUpdateMessage.Base\022\?\n\005mine"
    "s\030\002 \003(\01320.strategy_protocol.WorldStatusU"
    "pdateMessage.Mine\022G\n\tobstacles\030\003 \003(\01324.s"
    "trategy_protocol.WorldStatusUpdateMessag"
    "e.Obstacle\022C\n\007workers\030\004 \003(\01322.strategy_p"
    "rotocol.WorldStatusUpdateMessage.Worker\022"
    "E\n\010soldiers\030\005 \003(\01323.strategy_protocol.Wo"
    "rldStatusUpdateMessage.Soldier\022\020\n\010resour"
    "ce\030\006 \001(\005\022\016\n\006myteam\030\007 \001(\005\032M\n\020CommonProper"
    "ties\022\n\n\002id\030\001 \001(\t\022-\n\010position\030\002 \001(\0132\033.str"
    "ategy_protocol.Position\032r\n\004Base\022L\n\006commo"
    "n\030\001 \001(\0132<.strategy_protocol.WorldStatusU"
    "pdateMessage.CommonProperties\022\016\n\006health\030"
    "\002 \001(\005\022\014\n\004team\030\003 \001(\005\032f\n\004Mine\022L\n\006common\030\001 "
    "\001(\0132<.strategy_protocol.WorldStatusUpdat"
    "eMessage.CommonProperties\022\020\n\010capacity\030\002 "
    "\001(\005\032X\n\010Obstacle\022L\n\006common\030\001 \001(\0132<.strate"
    "gy_protocol.WorldStatusUpdateMessage.Com"
    "monProperties\032\206\001\n\006Worker\022L\n\006common\030\001 \001(\013"
    "2<.strategy_protocol.WorldStatusUpdateMe"
    "ssage.CommonProperties\022\020\n\010resource\030\002 \001(\005"
    "\022\016\n\006health\030\003 \001(\005\022\014\n\004team\030\004 \001(\005\032u\n\007Soldie"
    "r\022L\n\006common\030\001 \001(\0132<.strategy_protocol.Wo"
    "rldStatusUpdateMessage.CommonProperties\022"
    "\016\n\006health\030\002 \001(\005\022\014\n\004team\030\003 \001(\005", 1109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldStatusUpdate.proto", &protobuf_RegisterTypes);
  WorldStatusUpdateMessage::default_instance_ = new WorldStatusUpdateMessage();
  WorldStatusUpdateMessage_CommonProperties::default_instance_ = new WorldStatusUpdateMessage_CommonProperties();
  WorldStatusUpdateMessage_Base::default_instance_ = new WorldStatusUpdateMessage_Base();
  WorldStatusUpdateMessage_Mine::default_instance_ = new WorldStatusUpdateMessage_Mine();
  WorldStatusUpdateMessage_Obstacle::default_instance_ = new WorldStatusUpdateMessage_Obstacle();
  WorldStatusUpdateMessage_Worker::default_instance_ = new WorldStatusUpdateMessage_Worker();
  WorldStatusUpdateMessage_Soldier::default_instance_ = new WorldStatusUpdateMessage_Soldier();
  WorldStatusUpdateMessage::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_CommonProperties::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_Base::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_Mine::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_Obstacle::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_Worker::default_instance_->InitAsDefaultInstance();
  WorldStatusUpdateMessage_Soldier::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldStatusUpdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldStatusUpdate_2eproto {
  StaticDescriptorInitializer_WorldStatusUpdate_2eproto() {
    protobuf_AddDesc_WorldStatusUpdate_2eproto();
  }
} static_descriptor_initializer_WorldStatusUpdate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_CommonProperties::kIdFieldNumber;
const int WorldStatusUpdateMessage_CommonProperties::kPositionFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_CommonProperties::WorldStatusUpdateMessage_CommonProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_CommonProperties::InitAsDefaultInstance() {
  position_ = const_cast< ::strategy_protocol::Position*>(&::strategy_protocol::Position::default_instance());
}

WorldStatusUpdateMessage_CommonProperties::WorldStatusUpdateMessage_CommonProperties(const WorldStatusUpdateMessage_CommonProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_CommonProperties::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_CommonProperties::~WorldStatusUpdateMessage_CommonProperties() {
  SharedDtor();
}

void WorldStatusUpdateMessage_CommonProperties::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void WorldStatusUpdateMessage_CommonProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_CommonProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_CommonProperties_descriptor_;
}

const WorldStatusUpdateMessage_CommonProperties& WorldStatusUpdateMessage_CommonProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_CommonProperties* WorldStatusUpdateMessage_CommonProperties::default_instance_ = NULL;

WorldStatusUpdateMessage_CommonProperties* WorldStatusUpdateMessage_CommonProperties::New() const {
  return new WorldStatusUpdateMessage_CommonProperties;
}

void WorldStatusUpdateMessage_CommonProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::strategy_protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_CommonProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .strategy_protocol.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_CommonProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .strategy_protocol.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_CommonProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .strategy_protocol.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_CommonProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .strategy_protocol.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_CommonProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_CommonProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_CommonProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_CommonProperties::MergeFrom(const WorldStatusUpdateMessage_CommonProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::strategy_protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_CommonProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_CommonProperties::CopyFrom(const WorldStatusUpdateMessage_CommonProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_CommonProperties::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_CommonProperties::Swap(WorldStatusUpdateMessage_CommonProperties* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_CommonProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_CommonProperties_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_CommonProperties_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_Base::kCommonFieldNumber;
const int WorldStatusUpdateMessage_Base::kHealthFieldNumber;
const int WorldStatusUpdateMessage_Base::kTeamFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_Base::WorldStatusUpdateMessage_Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_Base::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdateMessage_CommonProperties*>(&::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::default_instance());
}

WorldStatusUpdateMessage_Base::WorldStatusUpdateMessage_Base(const WorldStatusUpdateMessage_Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Base::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_Base::~WorldStatusUpdateMessage_Base() {
  SharedDtor();
}

void WorldStatusUpdateMessage_Base::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdateMessage_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_Base_descriptor_;
}

const WorldStatusUpdateMessage_Base& WorldStatusUpdateMessage_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_Base* WorldStatusUpdateMessage_Base::default_instance_ = NULL;

WorldStatusUpdateMessage_Base* WorldStatusUpdateMessage_Base::New() const {
  return new WorldStatusUpdateMessage_Base;
}

void WorldStatusUpdateMessage_Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::Clear();
    }
    health_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // optional int32 team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  // optional int32 team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  // optional int32 team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_Base::MergeFrom(const WorldStatusUpdateMessage_Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Base::CopyFrom(const WorldStatusUpdateMessage_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_Base::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_Base::Swap(WorldStatusUpdateMessage_Base* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_Base_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_Base_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_Mine::kCommonFieldNumber;
const int WorldStatusUpdateMessage_Mine::kCapacityFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_Mine::WorldStatusUpdateMessage_Mine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_Mine::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdateMessage_CommonProperties*>(&::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::default_instance());
}

WorldStatusUpdateMessage_Mine::WorldStatusUpdateMessage_Mine(const WorldStatusUpdateMessage_Mine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Mine::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_Mine::~WorldStatusUpdateMessage_Mine() {
  SharedDtor();
}

void WorldStatusUpdateMessage_Mine::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdateMessage_Mine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Mine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_Mine_descriptor_;
}

const WorldStatusUpdateMessage_Mine& WorldStatusUpdateMessage_Mine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_Mine* WorldStatusUpdateMessage_Mine::default_instance_ = NULL;

WorldStatusUpdateMessage_Mine* WorldStatusUpdateMessage_Mine::New() const {
  return new WorldStatusUpdateMessage_Mine;
}

void WorldStatusUpdateMessage_Mine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::Clear();
    }
    capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_Mine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_Mine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_Mine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_Mine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_Mine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_Mine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_Mine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_Mine::MergeFrom(const WorldStatusUpdateMessage_Mine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_Mine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Mine::CopyFrom(const WorldStatusUpdateMessage_Mine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_Mine::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_Mine::Swap(WorldStatusUpdateMessage_Mine* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_Mine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_Mine_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_Mine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_Obstacle::kCommonFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_Obstacle::WorldStatusUpdateMessage_Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_Obstacle::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdateMessage_CommonProperties*>(&::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::default_instance());
}

WorldStatusUpdateMessage_Obstacle::WorldStatusUpdateMessage_Obstacle(const WorldStatusUpdateMessage_Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Obstacle::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_Obstacle::~WorldStatusUpdateMessage_Obstacle() {
  SharedDtor();
}

void WorldStatusUpdateMessage_Obstacle::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdateMessage_Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_Obstacle_descriptor_;
}

const WorldStatusUpdateMessage_Obstacle& WorldStatusUpdateMessage_Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_Obstacle* WorldStatusUpdateMessage_Obstacle::default_instance_ = NULL;

WorldStatusUpdateMessage_Obstacle* WorldStatusUpdateMessage_Obstacle::New() const {
  return new WorldStatusUpdateMessage_Obstacle;
}

void WorldStatusUpdateMessage_Obstacle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_Obstacle::MergeFrom(const WorldStatusUpdateMessage_Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Obstacle::CopyFrom(const WorldStatusUpdateMessage_Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_Obstacle::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_Obstacle::Swap(WorldStatusUpdateMessage_Obstacle* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_Obstacle_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_Obstacle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_Worker::kCommonFieldNumber;
const int WorldStatusUpdateMessage_Worker::kResourceFieldNumber;
const int WorldStatusUpdateMessage_Worker::kHealthFieldNumber;
const int WorldStatusUpdateMessage_Worker::kTeamFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_Worker::WorldStatusUpdateMessage_Worker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_Worker::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdateMessage_CommonProperties*>(&::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::default_instance());
}

WorldStatusUpdateMessage_Worker::WorldStatusUpdateMessage_Worker(const WorldStatusUpdateMessage_Worker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Worker::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  resource_ = 0;
  health_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_Worker::~WorldStatusUpdateMessage_Worker() {
  SharedDtor();
}

void WorldStatusUpdateMessage_Worker::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdateMessage_Worker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Worker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_Worker_descriptor_;
}

const WorldStatusUpdateMessage_Worker& WorldStatusUpdateMessage_Worker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_Worker* WorldStatusUpdateMessage_Worker::default_instance_ = NULL;

WorldStatusUpdateMessage_Worker* WorldStatusUpdateMessage_Worker::New() const {
  return new WorldStatusUpdateMessage_Worker;
}

void WorldStatusUpdateMessage_Worker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::Clear();
    }
    resource_ = 0;
    health_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_Worker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource;
        break;
      }

      // optional int32 resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_health;
        break;
      }

      // optional int32 health = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional int32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_Worker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource(), output);
  }

  // optional int32 health = 3;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health(), output);
  }

  // optional int32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_Worker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 resource = 2;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resource(), target);
  }

  // optional int32 health = 3;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health(), target);
  }

  // optional int32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_Worker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 health = 3;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_Worker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_Worker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_Worker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_Worker::MergeFrom(const WorldStatusUpdateMessage_Worker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_Worker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Worker::CopyFrom(const WorldStatusUpdateMessage_Worker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_Worker::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_Worker::Swap(WorldStatusUpdateMessage_Worker* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(resource_, other->resource_);
    std::swap(health_, other->health_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_Worker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_Worker_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_Worker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage_Soldier::kCommonFieldNumber;
const int WorldStatusUpdateMessage_Soldier::kHealthFieldNumber;
const int WorldStatusUpdateMessage_Soldier::kTeamFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage_Soldier::WorldStatusUpdateMessage_Soldier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage_Soldier::InitAsDefaultInstance() {
  common_ = const_cast< ::strategy_protocol::WorldStatusUpdateMessage_CommonProperties*>(&::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::default_instance());
}

WorldStatusUpdateMessage_Soldier::WorldStatusUpdateMessage_Soldier(const WorldStatusUpdateMessage_Soldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Soldier::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  health_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage_Soldier::~WorldStatusUpdateMessage_Soldier() {
  SharedDtor();
}

void WorldStatusUpdateMessage_Soldier::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void WorldStatusUpdateMessage_Soldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage_Soldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_Soldier_descriptor_;
}

const WorldStatusUpdateMessage_Soldier& WorldStatusUpdateMessage_Soldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage_Soldier* WorldStatusUpdateMessage_Soldier::default_instance_ = NULL;

WorldStatusUpdateMessage_Soldier* WorldStatusUpdateMessage_Soldier::New() const {
  return new WorldStatusUpdateMessage_Soldier;
}

void WorldStatusUpdateMessage_Soldier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::Clear();
    }
    health_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage_Soldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_health;
        break;
      }

      // optional int32 health = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // optional int32 team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage_Soldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional int32 health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->health(), output);
  }

  // optional int32 team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage_Soldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional int32 health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->health(), target);
  }

  // optional int32 team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage_Soldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .strategy_protocol.WorldStatusUpdateMessage.CommonProperties common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional int32 health = 2;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage_Soldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage_Soldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage_Soldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage_Soldier::MergeFrom(const WorldStatusUpdateMessage_Soldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::strategy_protocol::WorldStatusUpdateMessage_CommonProperties::MergeFrom(from.common());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage_Soldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage_Soldier::CopyFrom(const WorldStatusUpdateMessage_Soldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage_Soldier::IsInitialized() const {

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage_Soldier::Swap(WorldStatusUpdateMessage_Soldier* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(health_, other->health_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage_Soldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_Soldier_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_Soldier_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WorldStatusUpdateMessage::kBasesFieldNumber;
const int WorldStatusUpdateMessage::kMinesFieldNumber;
const int WorldStatusUpdateMessage::kObstaclesFieldNumber;
const int WorldStatusUpdateMessage::kWorkersFieldNumber;
const int WorldStatusUpdateMessage::kSoldiersFieldNumber;
const int WorldStatusUpdateMessage::kResourceFieldNumber;
const int WorldStatusUpdateMessage::kMyteamFieldNumber;
#endif  // !_MSC_VER

WorldStatusUpdateMessage::WorldStatusUpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatusUpdateMessage::InitAsDefaultInstance() {
}

WorldStatusUpdateMessage::WorldStatusUpdateMessage(const WorldStatusUpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatusUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  resource_ = 0;
  myteam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatusUpdateMessage::~WorldStatusUpdateMessage() {
  SharedDtor();
}

void WorldStatusUpdateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldStatusUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatusUpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatusUpdateMessage_descriptor_;
}

const WorldStatusUpdateMessage& WorldStatusUpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldStatusUpdate_2eproto();
  return *default_instance_;
}

WorldStatusUpdateMessage* WorldStatusUpdateMessage::default_instance_ = NULL;

WorldStatusUpdateMessage* WorldStatusUpdateMessage::New() const {
  return new WorldStatusUpdateMessage;
}

void WorldStatusUpdateMessage::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    resource_ = 0;
    myteam_ = 0;
  }
  bases_.Clear();
  mines_.Clear();
  obstacles_.Clear();
  workers_.Clear();
  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatusUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .strategy_protocol.WorldStatusUpdateMessage.Base bases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bases;
        if (input->ExpectTag(18)) goto parse_mines;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdateMessage.Mine mines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mines;
        if (input->ExpectTag(26)) goto parse_obstacles;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdateMessage.Obstacle obstacles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obstacles;
        if (input->ExpectTag(34)) goto parse_workers;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdateMessage.Worker workers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_workers;
        if (input->ExpectTag(42)) goto parse_soldiers;
        break;
      }

      // repeated .strategy_protocol.WorldStatusUpdateMessage.Soldier soldiers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_soldiers;
        if (input->ExpectTag(48)) goto parse_resource;
        break;
      }

      // optional int32 resource = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_myteam;
        break;
      }

      // optional int32 myteam = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myteam_)));
          set_has_myteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatusUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .strategy_protocol.WorldStatusUpdateMessage.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bases(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Mine mines = 2;
  for (int i = 0; i < this->mines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mines(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacles(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Worker workers = 4;
  for (int i = 0; i < this->workers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->workers(i), output);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Soldier soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->soldiers(i), output);
  }

  // optional int32 resource = 6;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resource(), output);
  }

  // optional int32 myteam = 7;
  if (has_myteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->myteam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatusUpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .strategy_protocol.WorldStatusUpdateMessage.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bases(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Mine mines = 2;
  for (int i = 0; i < this->mines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mines(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obstacles(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Worker workers = 4;
  for (int i = 0; i < this->workers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->workers(i), target);
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Soldier soldiers = 5;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->soldiers(i), target);
  }

  // optional int32 resource = 6;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resource(), target);
  }

  // optional int32 myteam = 7;
  if (has_myteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->myteam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatusUpdateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 resource = 6;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource());
    }

    // optional int32 myteam = 7;
    if (has_myteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myteam());
    }

  }
  // repeated .strategy_protocol.WorldStatusUpdateMessage.Base bases = 1;
  total_size += 1 * this->bases_size();
  for (int i = 0; i < this->bases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bases(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Mine mines = 2;
  total_size += 1 * this->mines_size();
  for (int i = 0; i < this->mines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mines(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Obstacle obstacles = 3;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Worker workers = 4;
  total_size += 1 * this->workers_size();
  for (int i = 0; i < this->workers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workers(i));
  }

  // repeated .strategy_protocol.WorldStatusUpdateMessage.Soldier soldiers = 5;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatusUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatusUpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatusUpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatusUpdateMessage::MergeFrom(const WorldStatusUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  bases_.MergeFrom(from.bases_);
  mines_.MergeFrom(from.mines_);
  obstacles_.MergeFrom(from.obstacles_);
  workers_.MergeFrom(from.workers_);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_myteam()) {
      set_myteam(from.myteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatusUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatusUpdateMessage::CopyFrom(const WorldStatusUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatusUpdateMessage::IsInitialized() const {

  for (int i = 0; i < bases_size(); i++) {
    if (!this->bases(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mines_size(); i++) {
    if (!this->mines(i).IsInitialized()) return false;
  }
  for (int i = 0; i < obstacles_size(); i++) {
    if (!this->obstacles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < workers_size(); i++) {
    if (!this->workers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < soldiers_size(); i++) {
    if (!this->soldiers(i).IsInitialized()) return false;
  }
  return true;
}

void WorldStatusUpdateMessage::Swap(WorldStatusUpdateMessage* other) {
  if (other != this) {
    bases_.Swap(&other->bases_);
    mines_.Swap(&other->mines_);
    obstacles_.Swap(&other->obstacles_);
    workers_.Swap(&other->workers_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(resource_, other->resource_);
    std::swap(myteam_, other->myteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatusUpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatusUpdateMessage_descriptor_;
  metadata.reflection = WorldStatusUpdateMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy_protocol

// @@protoc_insertion_point(global_scope)
