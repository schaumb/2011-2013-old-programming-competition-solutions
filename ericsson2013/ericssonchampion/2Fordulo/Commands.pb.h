// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Commands.proto

#ifndef PROTOBUF_Commands_2eproto__INCLUDED
#define PROTOBUF_Commands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace strategy_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Commands_2eproto();
void protobuf_AssignDesc_Commands_2eproto();
void protobuf_ShutdownFile_Commands_2eproto();

class CommandsMessage;
class CommandsMessage_Move;
class CommandsMessage_Attack;
class CommandsMessage_Train;
class CommandsMessage_Command;

enum CommandsMessage_ActorType {
  CommandsMessage_ActorType_SOLDIER = 0,
  CommandsMessage_ActorType_WORKER = 1
};
bool CommandsMessage_ActorType_IsValid(int value);
const CommandsMessage_ActorType CommandsMessage_ActorType_ActorType_MIN = CommandsMessage_ActorType_SOLDIER;
const CommandsMessage_ActorType CommandsMessage_ActorType_ActorType_MAX = CommandsMessage_ActorType_WORKER;
const int CommandsMessage_ActorType_ActorType_ARRAYSIZE = CommandsMessage_ActorType_ActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandsMessage_ActorType_descriptor();
inline const ::std::string& CommandsMessage_ActorType_Name(CommandsMessage_ActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandsMessage_ActorType_descriptor(), value);
}
inline bool CommandsMessage_ActorType_Parse(
    const ::std::string& name, CommandsMessage_ActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandsMessage_ActorType>(
    CommandsMessage_ActorType_descriptor(), name, value);
}
enum CommandsMessage_CommandType {
  CommandsMessage_CommandType_MOVE = 1,
  CommandsMessage_CommandType_ATTACK = 2,
  CommandsMessage_CommandType_TRAIN = 3
};
bool CommandsMessage_CommandType_IsValid(int value);
const CommandsMessage_CommandType CommandsMessage_CommandType_CommandType_MIN = CommandsMessage_CommandType_MOVE;
const CommandsMessage_CommandType CommandsMessage_CommandType_CommandType_MAX = CommandsMessage_CommandType_TRAIN;
const int CommandsMessage_CommandType_CommandType_ARRAYSIZE = CommandsMessage_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandsMessage_CommandType_descriptor();
inline const ::std::string& CommandsMessage_CommandType_Name(CommandsMessage_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandsMessage_CommandType_descriptor(), value);
}
inline bool CommandsMessage_CommandType_Parse(
    const ::std::string& name, CommandsMessage_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandsMessage_CommandType>(
    CommandsMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class CommandsMessage_Move : public ::google::protobuf::Message {
 public:
  CommandsMessage_Move();
  virtual ~CommandsMessage_Move();

  CommandsMessage_Move(const CommandsMessage_Move& from);

  inline CommandsMessage_Move& operator=(const CommandsMessage_Move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandsMessage_Move& default_instance();

  void Swap(CommandsMessage_Move* other);

  // implements Message ----------------------------------------------

  CommandsMessage_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandsMessage_Move& from);
  void MergeFrom(const CommandsMessage_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required .strategy_protocol.Position toPosition = 2;
  inline bool has_toposition() const;
  inline void clear_toposition();
  static const int kToPositionFieldNumber = 2;
  inline const ::strategy_protocol::Position& toposition() const;
  inline ::strategy_protocol::Position* mutable_toposition();
  inline ::strategy_protocol::Position* release_toposition();
  inline void set_allocated_toposition(::strategy_protocol::Position* toposition);

  // @@protoc_insertion_point(class_scope:strategy_protocol.CommandsMessage.Move)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_toposition();
  inline void clear_has_toposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  ::strategy_protocol::Position* toposition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static CommandsMessage_Move* default_instance_;
};
// -------------------------------------------------------------------

class CommandsMessage_Attack : public ::google::protobuf::Message {
 public:
  CommandsMessage_Attack();
  virtual ~CommandsMessage_Attack();

  CommandsMessage_Attack(const CommandsMessage_Attack& from);

  inline CommandsMessage_Attack& operator=(const CommandsMessage_Attack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandsMessage_Attack& default_instance();

  void Swap(CommandsMessage_Attack* other);

  // implements Message ----------------------------------------------

  CommandsMessage_Attack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandsMessage_Attack& from);
  void MergeFrom(const CommandsMessage_Attack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required string what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:strategy_protocol.CommandsMessage.Attack)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static CommandsMessage_Attack* default_instance_;
};
// -------------------------------------------------------------------

class CommandsMessage_Train : public ::google::protobuf::Message {
 public:
  CommandsMessage_Train();
  virtual ~CommandsMessage_Train();

  CommandsMessage_Train(const CommandsMessage_Train& from);

  inline CommandsMessage_Train& operator=(const CommandsMessage_Train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandsMessage_Train& default_instance();

  void Swap(CommandsMessage_Train* other);

  // implements Message ----------------------------------------------

  CommandsMessage_Train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandsMessage_Train& from);
  void MergeFrom(const CommandsMessage_Train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string withWhat = 1;
  inline bool has_withwhat() const;
  inline void clear_withwhat();
  static const int kWithWhatFieldNumber = 1;
  inline const ::std::string& withwhat() const;
  inline void set_withwhat(const ::std::string& value);
  inline void set_withwhat(const char* value);
  inline void set_withwhat(const char* value, size_t size);
  inline ::std::string* mutable_withwhat();
  inline ::std::string* release_withwhat();
  inline void set_allocated_withwhat(::std::string* withwhat);

  // required .strategy_protocol.CommandsMessage.ActorType what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline ::strategy_protocol::CommandsMessage_ActorType what() const;
  inline void set_what(::strategy_protocol::CommandsMessage_ActorType value);

  // @@protoc_insertion_point(class_scope:strategy_protocol.CommandsMessage.Train)
 private:
  inline void set_has_withwhat();
  inline void clear_has_withwhat();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* withwhat_;
  int what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static CommandsMessage_Train* default_instance_;
};
// -------------------------------------------------------------------

class CommandsMessage_Command : public ::google::protobuf::Message {
 public:
  CommandsMessage_Command();
  virtual ~CommandsMessage_Command();

  CommandsMessage_Command(const CommandsMessage_Command& from);

  inline CommandsMessage_Command& operator=(const CommandsMessage_Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandsMessage_Command& default_instance();

  void Swap(CommandsMessage_Command* other);

  // implements Message ----------------------------------------------

  CommandsMessage_Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandsMessage_Command& from);
  void MergeFrom(const CommandsMessage_Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .strategy_protocol.CommandsMessage.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::strategy_protocol::CommandsMessage_CommandType commandtype() const;
  inline void set_commandtype(::strategy_protocol::CommandsMessage_CommandType value);

  // optional .strategy_protocol.CommandsMessage.Move moveCommand = 2;
  inline bool has_movecommand() const;
  inline void clear_movecommand();
  static const int kMoveCommandFieldNumber = 2;
  inline const ::strategy_protocol::CommandsMessage_Move& movecommand() const;
  inline ::strategy_protocol::CommandsMessage_Move* mutable_movecommand();
  inline ::strategy_protocol::CommandsMessage_Move* release_movecommand();
  inline void set_allocated_movecommand(::strategy_protocol::CommandsMessage_Move* movecommand);

  // optional .strategy_protocol.CommandsMessage.Attack attackCommand = 3;
  inline bool has_attackcommand() const;
  inline void clear_attackcommand();
  static const int kAttackCommandFieldNumber = 3;
  inline const ::strategy_protocol::CommandsMessage_Attack& attackcommand() const;
  inline ::strategy_protocol::CommandsMessage_Attack* mutable_attackcommand();
  inline ::strategy_protocol::CommandsMessage_Attack* release_attackcommand();
  inline void set_allocated_attackcommand(::strategy_protocol::CommandsMessage_Attack* attackcommand);

  // optional .strategy_protocol.CommandsMessage.Train trainCommand = 4;
  inline bool has_traincommand() const;
  inline void clear_traincommand();
  static const int kTrainCommandFieldNumber = 4;
  inline const ::strategy_protocol::CommandsMessage_Train& traincommand() const;
  inline ::strategy_protocol::CommandsMessage_Train* mutable_traincommand();
  inline ::strategy_protocol::CommandsMessage_Train* release_traincommand();
  inline void set_allocated_traincommand(::strategy_protocol::CommandsMessage_Train* traincommand);

  // @@protoc_insertion_point(class_scope:strategy_protocol.CommandsMessage.Command)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_movecommand();
  inline void clear_has_movecommand();
  inline void set_has_attackcommand();
  inline void clear_has_attackcommand();
  inline void set_has_traincommand();
  inline void clear_has_traincommand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::strategy_protocol::CommandsMessage_Move* movecommand_;
  ::strategy_protocol::CommandsMessage_Attack* attackcommand_;
  ::strategy_protocol::CommandsMessage_Train* traincommand_;
  int commandtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static CommandsMessage_Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandsMessage : public ::google::protobuf::Message {
 public:
  CommandsMessage();
  virtual ~CommandsMessage();

  CommandsMessage(const CommandsMessage& from);

  inline CommandsMessage& operator=(const CommandsMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandsMessage& default_instance();

  void Swap(CommandsMessage* other);

  // implements Message ----------------------------------------------

  CommandsMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandsMessage& from);
  void MergeFrom(const CommandsMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommandsMessage_Move Move;
  typedef CommandsMessage_Attack Attack;
  typedef CommandsMessage_Train Train;
  typedef CommandsMessage_Command Command;

  typedef CommandsMessage_ActorType ActorType;
  static const ActorType SOLDIER = CommandsMessage_ActorType_SOLDIER;
  static const ActorType WORKER = CommandsMessage_ActorType_WORKER;
  static inline bool ActorType_IsValid(int value) {
    return CommandsMessage_ActorType_IsValid(value);
  }
  static const ActorType ActorType_MIN =
    CommandsMessage_ActorType_ActorType_MIN;
  static const ActorType ActorType_MAX =
    CommandsMessage_ActorType_ActorType_MAX;
  static const int ActorType_ARRAYSIZE =
    CommandsMessage_ActorType_ActorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActorType_descriptor() {
    return CommandsMessage_ActorType_descriptor();
  }
  static inline const ::std::string& ActorType_Name(ActorType value) {
    return CommandsMessage_ActorType_Name(value);
  }
  static inline bool ActorType_Parse(const ::std::string& name,
      ActorType* value) {
    return CommandsMessage_ActorType_Parse(name, value);
  }

  typedef CommandsMessage_CommandType CommandType;
  static const CommandType MOVE = CommandsMessage_CommandType_MOVE;
  static const CommandType ATTACK = CommandsMessage_CommandType_ATTACK;
  static const CommandType TRAIN = CommandsMessage_CommandType_TRAIN;
  static inline bool CommandType_IsValid(int value) {
    return CommandsMessage_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    CommandsMessage_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    CommandsMessage_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    CommandsMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return CommandsMessage_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return CommandsMessage_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return CommandsMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .strategy_protocol.CommandsMessage.Command commands = 1;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 1;
  inline const ::strategy_protocol::CommandsMessage_Command& commands(int index) const;
  inline ::strategy_protocol::CommandsMessage_Command* mutable_commands(int index);
  inline ::strategy_protocol::CommandsMessage_Command* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::strategy_protocol::CommandsMessage_Command >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::strategy_protocol::CommandsMessage_Command >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:strategy_protocol.CommandsMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::strategy_protocol::CommandsMessage_Command > commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Commands_2eproto();
  friend void protobuf_AssignDesc_Commands_2eproto();
  friend void protobuf_ShutdownFile_Commands_2eproto();

  void InitAsDefaultInstance();
  static CommandsMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CommandsMessage_Move

// required string withWhat = 1;
inline bool CommandsMessage_Move::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandsMessage_Move::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandsMessage_Move::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandsMessage_Move::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& CommandsMessage_Move::withwhat() const {
  return *withwhat_;
}
inline void CommandsMessage_Move::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Move::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Move::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandsMessage_Move::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* CommandsMessage_Move::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandsMessage_Move::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .strategy_protocol.Position toPosition = 2;
inline bool CommandsMessage_Move::has_toposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandsMessage_Move::set_has_toposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandsMessage_Move::clear_has_toposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandsMessage_Move::clear_toposition() {
  if (toposition_ != NULL) toposition_->::strategy_protocol::Position::Clear();
  clear_has_toposition();
}
inline const ::strategy_protocol::Position& CommandsMessage_Move::toposition() const {
  return toposition_ != NULL ? *toposition_ : *default_instance_->toposition_;
}
inline ::strategy_protocol::Position* CommandsMessage_Move::mutable_toposition() {
  set_has_toposition();
  if (toposition_ == NULL) toposition_ = new ::strategy_protocol::Position;
  return toposition_;
}
inline ::strategy_protocol::Position* CommandsMessage_Move::release_toposition() {
  clear_has_toposition();
  ::strategy_protocol::Position* temp = toposition_;
  toposition_ = NULL;
  return temp;
}
inline void CommandsMessage_Move::set_allocated_toposition(::strategy_protocol::Position* toposition) {
  delete toposition_;
  toposition_ = toposition;
  if (toposition) {
    set_has_toposition();
  } else {
    clear_has_toposition();
  }
}

// -------------------------------------------------------------------

// CommandsMessage_Attack

// required string withWhat = 1;
inline bool CommandsMessage_Attack::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandsMessage_Attack::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandsMessage_Attack::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandsMessage_Attack::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& CommandsMessage_Attack::withwhat() const {
  return *withwhat_;
}
inline void CommandsMessage_Attack::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Attack::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Attack::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandsMessage_Attack::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* CommandsMessage_Attack::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandsMessage_Attack::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string what = 2;
inline bool CommandsMessage_Attack::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandsMessage_Attack::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandsMessage_Attack::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandsMessage_Attack::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& CommandsMessage_Attack::what() const {
  return *what_;
}
inline void CommandsMessage_Attack::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void CommandsMessage_Attack::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void CommandsMessage_Attack::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandsMessage_Attack::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* CommandsMessage_Attack::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandsMessage_Attack::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandsMessage_Train

// required string withWhat = 1;
inline bool CommandsMessage_Train::has_withwhat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandsMessage_Train::set_has_withwhat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandsMessage_Train::clear_has_withwhat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandsMessage_Train::clear_withwhat() {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    withwhat_->clear();
  }
  clear_has_withwhat();
}
inline const ::std::string& CommandsMessage_Train::withwhat() const {
  return *withwhat_;
}
inline void CommandsMessage_Train::set_withwhat(const ::std::string& value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Train::set_withwhat(const char* value) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(value);
}
inline void CommandsMessage_Train::set_withwhat(const char* value, size_t size) {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  withwhat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandsMessage_Train::mutable_withwhat() {
  set_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    withwhat_ = new ::std::string;
  }
  return withwhat_;
}
inline ::std::string* CommandsMessage_Train::release_withwhat() {
  clear_has_withwhat();
  if (withwhat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = withwhat_;
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandsMessage_Train::set_allocated_withwhat(::std::string* withwhat) {
  if (withwhat_ != &::google::protobuf::internal::kEmptyString) {
    delete withwhat_;
  }
  if (withwhat) {
    set_has_withwhat();
    withwhat_ = withwhat;
  } else {
    clear_has_withwhat();
    withwhat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .strategy_protocol.CommandsMessage.ActorType what = 2;
inline bool CommandsMessage_Train::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandsMessage_Train::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandsMessage_Train::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandsMessage_Train::clear_what() {
  what_ = 0;
  clear_has_what();
}
inline ::strategy_protocol::CommandsMessage_ActorType CommandsMessage_Train::what() const {
  return static_cast< ::strategy_protocol::CommandsMessage_ActorType >(what_);
}
inline void CommandsMessage_Train::set_what(::strategy_protocol::CommandsMessage_ActorType value) {
  assert(::strategy_protocol::CommandsMessage_ActorType_IsValid(value));
  set_has_what();
  what_ = value;
}

// -------------------------------------------------------------------

// CommandsMessage_Command

// required .strategy_protocol.CommandsMessage.CommandType commandType = 1;
inline bool CommandsMessage_Command::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandsMessage_Command::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandsMessage_Command::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandsMessage_Command::clear_commandtype() {
  commandtype_ = 1;
  clear_has_commandtype();
}
inline ::strategy_protocol::CommandsMessage_CommandType CommandsMessage_Command::commandtype() const {
  return static_cast< ::strategy_protocol::CommandsMessage_CommandType >(commandtype_);
}
inline void CommandsMessage_Command::set_commandtype(::strategy_protocol::CommandsMessage_CommandType value) {
  assert(::strategy_protocol::CommandsMessage_CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// optional .strategy_protocol.CommandsMessage.Move moveCommand = 2;
inline bool CommandsMessage_Command::has_movecommand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandsMessage_Command::set_has_movecommand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandsMessage_Command::clear_has_movecommand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandsMessage_Command::clear_movecommand() {
  if (movecommand_ != NULL) movecommand_->::strategy_protocol::CommandsMessage_Move::Clear();
  clear_has_movecommand();
}
inline const ::strategy_protocol::CommandsMessage_Move& CommandsMessage_Command::movecommand() const {
  return movecommand_ != NULL ? *movecommand_ : *default_instance_->movecommand_;
}
inline ::strategy_protocol::CommandsMessage_Move* CommandsMessage_Command::mutable_movecommand() {
  set_has_movecommand();
  if (movecommand_ == NULL) movecommand_ = new ::strategy_protocol::CommandsMessage_Move;
  return movecommand_;
}
inline ::strategy_protocol::CommandsMessage_Move* CommandsMessage_Command::release_movecommand() {
  clear_has_movecommand();
  ::strategy_protocol::CommandsMessage_Move* temp = movecommand_;
  movecommand_ = NULL;
  return temp;
}
inline void CommandsMessage_Command::set_allocated_movecommand(::strategy_protocol::CommandsMessage_Move* movecommand) {
  delete movecommand_;
  movecommand_ = movecommand;
  if (movecommand) {
    set_has_movecommand();
  } else {
    clear_has_movecommand();
  }
}

// optional .strategy_protocol.CommandsMessage.Attack attackCommand = 3;
inline bool CommandsMessage_Command::has_attackcommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandsMessage_Command::set_has_attackcommand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandsMessage_Command::clear_has_attackcommand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandsMessage_Command::clear_attackcommand() {
  if (attackcommand_ != NULL) attackcommand_->::strategy_protocol::CommandsMessage_Attack::Clear();
  clear_has_attackcommand();
}
inline const ::strategy_protocol::CommandsMessage_Attack& CommandsMessage_Command::attackcommand() const {
  return attackcommand_ != NULL ? *attackcommand_ : *default_instance_->attackcommand_;
}
inline ::strategy_protocol::CommandsMessage_Attack* CommandsMessage_Command::mutable_attackcommand() {
  set_has_attackcommand();
  if (attackcommand_ == NULL) attackcommand_ = new ::strategy_protocol::CommandsMessage_Attack;
  return attackcommand_;
}
inline ::strategy_protocol::CommandsMessage_Attack* CommandsMessage_Command::release_attackcommand() {
  clear_has_attackcommand();
  ::strategy_protocol::CommandsMessage_Attack* temp = attackcommand_;
  attackcommand_ = NULL;
  return temp;
}
inline void CommandsMessage_Command::set_allocated_attackcommand(::strategy_protocol::CommandsMessage_Attack* attackcommand) {
  delete attackcommand_;
  attackcommand_ = attackcommand;
  if (attackcommand) {
    set_has_attackcommand();
  } else {
    clear_has_attackcommand();
  }
}

// optional .strategy_protocol.CommandsMessage.Train trainCommand = 4;
inline bool CommandsMessage_Command::has_traincommand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandsMessage_Command::set_has_traincommand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandsMessage_Command::clear_has_traincommand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandsMessage_Command::clear_traincommand() {
  if (traincommand_ != NULL) traincommand_->::strategy_protocol::CommandsMessage_Train::Clear();
  clear_has_traincommand();
}
inline const ::strategy_protocol::CommandsMessage_Train& CommandsMessage_Command::traincommand() const {
  return traincommand_ != NULL ? *traincommand_ : *default_instance_->traincommand_;
}
inline ::strategy_protocol::CommandsMessage_Train* CommandsMessage_Command::mutable_traincommand() {
  set_has_traincommand();
  if (traincommand_ == NULL) traincommand_ = new ::strategy_protocol::CommandsMessage_Train;
  return traincommand_;
}
inline ::strategy_protocol::CommandsMessage_Train* CommandsMessage_Command::release_traincommand() {
  clear_has_traincommand();
  ::strategy_protocol::CommandsMessage_Train* temp = traincommand_;
  traincommand_ = NULL;
  return temp;
}
inline void CommandsMessage_Command::set_allocated_traincommand(::strategy_protocol::CommandsMessage_Train* traincommand) {
  delete traincommand_;
  traincommand_ = traincommand;
  if (traincommand) {
    set_has_traincommand();
  } else {
    clear_has_traincommand();
  }
}

// -------------------------------------------------------------------

// CommandsMessage

// repeated .strategy_protocol.CommandsMessage.Command commands = 1;
inline int CommandsMessage::commands_size() const {
  return commands_.size();
}
inline void CommandsMessage::clear_commands() {
  commands_.Clear();
}
inline const ::strategy_protocol::CommandsMessage_Command& CommandsMessage::commands(int index) const {
  return commands_.Get(index);
}
inline ::strategy_protocol::CommandsMessage_Command* CommandsMessage::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::strategy_protocol::CommandsMessage_Command* CommandsMessage::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy_protocol::CommandsMessage_Command >&
CommandsMessage::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::strategy_protocol::CommandsMessage_Command >*
CommandsMessage::mutable_commands() {
  return &commands_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strategy_protocol::CommandsMessage_ActorType>() {
  return ::strategy_protocol::CommandsMessage_ActorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strategy_protocol::CommandsMessage_CommandType>() {
  return ::strategy_protocol::CommandsMessage_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Commands_2eproto__INCLUDED
